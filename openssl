
sngx_auto_lib_init  OpenSSL

ngx_feature_libs=
ngx_feature_path=`pwd`
ngx_feature_incs="#include <$NGX_AUTO_CONFIG_H>"



if [ $MAIL_SSL = YES ]; then

    # this comes after NGX_ADDONS in auto/modules so need to set it here
    # TODO : check that the reordering of mail/mail_ssl modules doesn't cause problems

    if [ $MAIL = YES ]; then
        have=NGX_MAIL_SSL . auto/have
        modules="$modules $MAIL_SSL_MODULE"
        MAIL_DEPS="$MAIL_DEPS $MAIL_SSL_DEPS"
        MAIL_SRCS="$MAIL_SRCS $MAIL_SSL_SRCS"
        USE_OPENSSL=YES
    fi

    MAIL_SSL=NO
fi


if [ -n "`echo $CORE_LIBS | grep -- -lssl`" ]; then
    USE_OPENSSL=YES
fi


if [ $USE_OPENSSL != YES ] && [ $OPENSSL = NONE ]; then

    ngx_feature="OpenSSL library required by user modules"
    ngx_feature_inc_path=$CFLAGS

    ngx_feature_test='
    #if !(NGX_OPENSSL) || (NGX_SSL)
        rubbish
    #endif
    '
    . auto/feature

    if [ $ngx_found = yes ]; then
        OPENSSL_CORE=YES
    else
        OPENSSL_CORE=NO
    fi
fi


if [ $USE_MD5 != YES ] && [ $MD5 = NONE ]; then

    ngx_feature="MD5 required by user modules"
    ngx_feature_inc_path=$CFLAGS
    ngx_feature_test='
    #if !(NGX_OPENSSL_MD5) && !(NGX_HAVE_OPENSSL_MD5) && !(NGX_HAVE_OPENSSL_MD5_H)
        rubbish
    #endif
    '
    . auto/feature

    if [ $ngx_found = yes ]; then
        USE_MD5=YES
    fi
fi


if [ $USE_SHA1 != YES ] && [ $SHA1 = NONE ]; then

    ngx_feature="SHA1 required by user modules"
    ngx_feature_inc_path=$CFLAGS
    ngx_feature_test='
    #if !(NGX_OPENSSL_SHA1) && ! (NGX_HAVE_OPENSSL_SHA1) && !(NGX_HAVE_OPENSSL_SHA1_H)
        rubbish
    #endif
    '
    . auto/feature

    if [ $ngx_found = yes ]; then
        USE_SHA1=YES
    fi
fi


ngx_feature_name=
ngx_feature_run=yes
ngx_feature_incs=
ngx_feature_test=

if [ $USE_OPENSSL = YES ]; then
    ngx_feature_incs="${ngx_feature_incs}
    #include <openssl/ssl.h>"
    ngx_feature_test="${ngx_feature_test}
    SSL_library_init();"
fi

if [ $USE_MD5 = YES ] && [ $MD5 = NONE ]; then
    ngx_feature_incs="${ngx_feature_incs}
    #include <openssl/md5.h>"
    ngx_feature_test="${ngx_feature_test}
    MD5_CTX md5; MD5_Init(&md5);"
fi

if [ $USE_SHA1 = YES ] && [ $SHA1 = NONE ]; then
    ngx_feature_incs="${ngx_feature_incs}
    #include <openssl/sha1.h>"
    ngx_feature_test="${ngx_feature_test}
    SHA_CTX sha1; SHA1_Init(&sha1);"
fi

if [ -z "$ngx_feature_incs" ]; then
    return 0
fi



case "$CC" in
    cl | bcc32)
        CFLAGS="$CFLAGS -DNO_SYS_TYPES_H"
        ngx_auto_lib_feature_build_dirs='openssl'
        ;;
    *)
        ngx_auto_lib_feature_build_dirs='.openssl'
        ;;
esac


ngx_auto_lib_test_core() {
    ngx_feature_inc_path=
    ngx_feature_path="$OPENSSL_INC $OPENSSL_INC/openssl"
    ngx_feature_libs=

    if [ -n "$OPENSSL_SHARED" ]; then

        if [ $NGX_RPATH = YES ]; then
            ngx_feature_libs="-R$OPENSSL_LIB"               
        fi

        ngx_feature_libs="$ngx_feature_libs -L$OPENSSL_LIB"

        if [ $USE_OPENSSL ]; then
            ngx_feature_libs="$ngx_feature_libs -lssl"
        fi

        ngx_feature_libs="$ngx_feature_libs -lcrypto $NGX_LIBDL"

    else
        case "$CC" in

            # see auto/libs/openssl/conf for reference

            cl | bcc32)
                ngx_feature_libs="$ngx_feature_libs $OPENSSL_LIB/ssleay32.lib"
                ngx_feature_libs="$ngx_feature_libs $OPENSSL_LIB/libeay32.lib"
                ngx_feature_libs="$ngx_feature_libs gdi32.lib"
                ngx_feature_libs="$ngx_feature_libs crypt32.lib"
                ;;
            *)
                if [ $USE_OPENSSL ]; then
                    ngx_feature_libs="$ngx_feature_libs $OPENSSL_LIB/libssl.a"
                fi

                ngx_feature_libs="$ngx_feature_libs $OPENSSL_LIB/libcrypto.a"

                if [ $USE_OPENSSL ]; then
                    ngx_feature_libs="$ngx_feature_libs $NGX_LIBDL"
                fi
                ;;
        esac
    fi

    # Some builds of OpenSSL require Zlib so we link it here if it will be available

    ngx_feature_libs_saved="$ngx_feature_libs"

    if [ $USE_ZLIB = YES ]; then
        ngx_auto_lib_feature_test_libs="-lz"
    fi

    . auto/feature
    [ $ngx_found = yes ] && return 0
    return 1
}


ngx_auto_lib_test_process


if [ $ngx_found = yes ]; then

    if [ "x$OPENSSL_SHARED" != "xYES" ]; then
        CORE_LIBS=`echo $CORE_LIBS | sed 's|-lssl||g'`
    fi

    CORE_INCS="$CORE_INCS $ngx_feature_path"
    CORE_LIBS="$CORE_LIBS $ngx_feature_libs_saved"

    if [ $USE_OPENSSL = YES ]; then
        USE_OPENSSL=NO
        OPENSSL=NO

        modules="$modules $OPENSSL_MODULE"
        CORE_DEPS="$CORE_DEPS $OPENSSL_INC/openssl/ssl.h"
        CORE_DEPS="$CORE_DEPS $OPENSSL_DEPS"
        CORE_SRCS="$CORE_SRCS $OPENSSL_SRCS"

        have=NGX_OPENSSL                . auto/have
        have=NGX_SSL                    . auto/have
    fi

    if [ $USE_MD5 = YES ] && [ $MD5 = NONE ]; then
        USE_MD5=NO
        MD5=YES
        MD5_LIB=OpenSSL
        OPENSSL_MD5=YES

        have=NGX_OPENSSL_MD5            . auto/have
        have=NGX_HAVE_OPENSSL_MD5       . auto/have
        have=NGX_HAVE_OPENSSL_MD5_H     . auto/have
    fi

    if [ $USE_SHA1 = YES ] && [ $SHA1 = NONE ]; then
        USE_SHA1=NO
        SHA1=YES
        SHA1_LIB=OpenSSL
        OPENSSL_SHA1=YES

        have=NGX_OPENSSL_SHA1           . auto/have
        have=NGX_HAVE_OPENSSL_SHA1      . auto/have
        have=NGX_HAVE_OPENSSL_SHA1_H    . auto/have
    fi
fi

